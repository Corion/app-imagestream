=head1 Feature list for version 0.02

=over 4

=item *

Redo the CSS to support different media styles, like phone, tablets etc.
transparently

=item *

Add media queries for Nexus 7 (?)

=item *

Add media queries for HDTV (1920x1080)

=item *

Add media queries for iPad mini (?)

=item *

Add media queries for iPad (?)

=item *

Add media queries for iPad 2 (?)

=item *

Add media queries for small phone (?)

=item *

White border around active/current image, together with triangle pointing down

Potentially do this by just adding/removing a class from the focused image

=item *

Make thumbnails hideable for slideshow, optionally

Also think about making this depend on the @media query

=item *

Move the image names into alt-captions. Display the image name and metadata
only with the large image, if JS is enabled.

=item *

Add L<Progress::Indicator> for console progress

=item *

Only render SVG to PNG when needed, not always

=item *

Move the meat of the program into App::ImageStream

=item *

Automated upload via WebDAV / SCP / tar+ssh+untar / copy / rsync
(also see L<App::Koi>)

=item *

Turn image conversion/thumbnail generation into plugins

=item *

Turn image list into "topical" list grouped by date, like App::PhotoImport does

=back

=head2 Feature list for version 0.03

=over 4

=item *

Create a nice-ish wxPerl UI

=item *

Create more uploaders for Picasa and Flickr

=item *

Have a way to generate watermarks

=item *

Have .tar and .tar.gz and .zip as theme formats

=item *

Have a directory cascade mechanism to merge/inherit from themes
(without dependency management, mind you)

=item *

Make the configuration cascade include the command line

Precedence (highest to lowest):

  command line               (ok)
  directory config file / -f (ok)
  ~/config                   (implemented but untested)
  /etc/config                (implemented but untested)

=item *

Write C<Config::Find>, which implements the logic for
locating a config file:

  command line option
  $ENV setting
  current directory
  project directory (as determined by some heuristic)
  user directory (as determined by File::HomeDir->my_data)
  machine-wide location (/etc)

Ignore the Registry for the time being.

For "project directory", take the code from
C<< Padre::ProjectManager->from_file >>.

=back

=head1 Nice-to-have feature list

=over 4

=item *

Make image/thumbnail creation (optionally) multithreaded

=item *

Dynamically load threads / Thread::Queue based on how many threads of
execution are specified by the user

=item *

Have auto-expanding items for "My Images" to make configuration
more magic

=item *

Have a "regen-feed" option that just looks at the thumbnail
files and generates RSS+Atom+HTML from it

=item *

More visible RSS icon in-page

=item *

left/right buttons in page

=item *

autoplay / slideshow in page

=item *

"permalink"/"link to this image" for each image

=item *

Have a local "webserver" to do a trial-run of the RSS/Atom/HTML feed

=item *

Generate face-centered thumbnails from face detection

=item *

Factor out cascade into config-cascade and file-cascade

=item *

Optionally inline all assets (jQuery, CSS, feed icon?) into the generated
HTML

=item *

Optionally even inline the thumbnails as DATA URIs

=item *

Look at L<Imager>s file types to learn what we can handle instead of
deferring blindly

=item *

Have the internal webserver have an easy way to switch between themes
for preview

=item *

Release list-to-feed generator separately on CPAN

=item *

Don't overwrite images by keeping track of target image names
and count them up if necessary.

=item *

Minify HTML

=back

=cut